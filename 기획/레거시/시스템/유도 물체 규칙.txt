유도 물체 조작
when: 운명 변화 중
where: 물체의 위치에서
who: 플레이어
what: 유도 물체를
how: 각 물체마다 2개 이상의 상태를 가지고 있으며 플레이어가 선택 가능. 선택에 따라 다른 시뮬레이션이 실행되야 함.

조작할 때에는 그 물체를 클릭해 포커스해야 함.
포커스된 물체 주위에는 <-, -> 모양의 화살표 버튼이 생김. 버튼을 누를 때마다 상태를 변경해야 함. 이때 화살표에 따라 다음 혹은 이전 상태를 보여줌. 
변경할 수 있는 상태가 없으면 화살표는 비활성화 됨. 예를들어 다음상태가 없으면 ->화살표가 보이지 않아야 함. 

운명 물체는 일반적인 오브젝트와 달리 특별한 표시가 되어 있음.
프로그래밍 시 상태를 배열로 관리하고 index로 상태를 변환하며 다음, 이전 상태로 전활할 수 있는지 체크하고 이를 이용해 UI에서 버튼을 비활성화하고 관련 Sprite를 출력해야 함.

why: 원하는 운명으로 주인공을 유도하기 위한 조작. 상태를 변경하는 것은 조작에 대한 피드백을 제공하는 것.

qusetion: 운명 물체를 가리키는 특별한 표시는 무엇인가. 윤곽선인가 여러 상태가 겹치는 모습인가 아니면 반투명인가.


운명 물체끼리의 상호작용
when: 유도 물체 조작 시
where: 물체의 위치에서
who: 시스템
what: 상호작용
how: 물체끼리는 서로의 상태에 따라 조작시 다른 동작을 할 수 있음. 예를 들어 그냥 문을 열 때는 진짜 문만 열리고 끝이지만 문 앞에 공이 있다면 문에 충돌함으로서 특정 방향으로 굴러가야 함.
이는 스테이지마다 어떤 기믹과 퍼즐을 넣느냐에 따라 구현의 종류가 달라짐. 때문에 유연성있게 구현해야 함.
이때 꼭 충돌같은 것을 구현할 필요는 없음. 예를 들어 공이 문 앞에 있을 때와 없을 때를 상태로 정의하고 이때 문이 열리면 공이 움직이는 애니메이션만 보여줘도 됨.
이는 플레이어가 직접 조작하는 것이 아니기에 충돌 대신에 '그리는' 형식으로 구현할 수 있음.
또, 어차피 지정된 위치로 이동하도록 설정해야 하기에 변수가 많은 충돌보다는 미리 경로를 정해놀을 수 있는 것이 좋음.
이는 기획자가 각 스테이지마다 설정해야 하는 것이므로 에디터 프로그래밍이 필요함.

why: 각 물체끼리 상호작용해 유도를 더 복잡하게 만들기 위함