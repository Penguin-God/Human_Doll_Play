운명 변화
when: 운명 변화 중
where: 운명 변화 가능 장소 
who: 시스템
what: 운명
how: 운명 변화는 플레이어가 유도 물체를 조작해 간접적인 방식으로 주인공과 관련되 세상의 운명을 바꾸는 것.
운명 변화는 미리보기, 설정, 시뮬레이션 3단계로 나뉘며 각 설명은 아래에 기술되어 있음.
또한 이 3개의 단계는 하나의 사이클로 이것이 한 스테이지에 여러 번 반복될 수 있음.

각 모드마다 UI와 조작할 수 있는 범위가 다름.
설정과 시뮬레이션 때의 조작 가능한 물체를 별도의 컬랙션으로 관리해야 함.
현재 상태를 저장하고 변환하는 클래스가 필요하며 이 값을 기반으로 UI 관련 요소들을 그려야 함.

why: 모드를 구분함으로서 플레이어가 상황에 따른 목표에 온전히 집중할 수 있게 함.
미리보기에서는 어떻게 세상을 바꿔야하는지 계획을 세우고
이를 바탕으로 여러 유도 물체의 상태를 설정하고 
시뮬레이션에서 스토리를 진행과 동시에 타이밍에 맞춰 물체를 조작하며 주인공의 행동을 유도해야 함.


미리보기
when: 운명 변화 중
where: 바꿔야 하는 운명이 일어난 장소
who: 시스템이
what: 원래 세상의 운명
why: 원래의 운명을 보여줌으로서 플레이어에게 어떻게 운명을 바꿔야할지 예측하게 해줌.
how: 캐릭터 움직임, 대화 기능들을 조합해 하나의 시뮬레이션을 보여줘야 함. 모든 시뮬레이션을 하드코딩하는 것은 비효율적이므로 이를 위한 전용 툴을 개발해야 함. 
가장 간단한 것을 엑셀이나 메모장에 연속적인 명령을 받아 이를 코드에서 변환할 수 있음. 더 유저 친화적인 것은 전용 에디터 UI를 개발하는 것. 이는 엔진마다 다르지만 Unity의 경우 별도의 에디터 프로그래밍을 통해 다양한 UI를 만들 수 있음.


설정
when: 운명 변화 중
where: 운명 변화 가능 장소
who: 시스템이
what: 유도 물체들
why: 시뮬레이션 실행 전 기본값을 설정하는 느낌으로 본격적인 유도에 들어가기 전에 플레이어가 물체의 상태에 따른 동작을 알아볼 수 있도록 하기 위함.
how: 설정 단계는 운명 싸이클 중 하나로 단계로 유도 물체들의 상태를 변경함.
플레이어는 물체들을 설정한 후 버튼을 클릭해 시뮬레이션을 실행할 수 있음.


시뮬레이션
when: 운명 변화 중
where: 운명 변화 가능 장소
who: 시스템이
what: 설정에 따라 달라진 운명
why: 운명 변화의 하이라이트. 캐릭터들의 움직임과 대화. 즉, 스토리와 플레이가 병렬적으로 진행되는 순간. 
실시간으로 물체를 조작함으로서 긴박감을 줄 수 있음. 또한 운명 변화의 결과를 확인하는 순간기도 함.

how: 이전에 물체를 설정한 상태에 따라 캐릭터가 움직이거나, 대화를 하는 등의 시뮬레이션이 실행되어야 함.
시뮬레이션에 따라 실패와 성공으로 결과가 갈릴 수 있음.
이를 위해서는 싸이클마다 일종의 분기가 필요하며 어떤 시뮬레이션을 실행할지를 미리 정해놔야 함. 그러므로 관련 작업을 위한 기획자 전용 UI필요.

설정값에 따라 조작 가능한 운명 물체의 종류 및 상태 역시 달라져야 함.
실시간으로 조작 가능한 물체의 경우 시간에 흐름에 따라 조작이 활성화하거나 비활성화 되는 기능도 있어야 함.

설정에 따라 다른 시뮬레이션이 실행시키기 위해 물체의 상태를 저장하고 시뮬레이션에 넘겨줘야 함.
물체의 상태를 index로 관리하는 등 저장과 비교가 가능하도록 정의해야 함.

각 유도 물체마다 조건을 설정해 시간의 흐름, 혹은 다른 운명 물체의 상태에 따라 조작 가능 상태를 변경해야 함.
이를 위해서는 조건의 타입을 구분해야 하며 2개 이상의 조건이 필요할 수도 있으므로 모든 조건을 만족해야만 조작을 활성화해야야 함. 
이는 조건을 추상화해 명령 패턴과 컴포지트 패턴을 조합하거나 아니면 enum과 정의한 enum타입의 컬랙션을 다루는 방식으로 구현할 수 있음. 조건에 변화가 많을 것이라고 예상된다면 추상화를 하는 쪽이 좋지만 코드의 복잡도는 증가함.


운명 체크포인트
when: 운명 변화 시
where: 운명이 변화한 장소
who: 시스템
what: 운명 변화를
how: 체크포인트는 원래 세상과 다른 결과가 생김으로서 운명이 변하는 기준점을 뜻함.
여러 작은 변화가 새로운 분기가 생기게 되는데 그 작은 변화의 부분을 체크포인트로 활용해 운명 갱신 실패 시 그 부분부터 다시 시작할 수 있음.

이를 위해서는 우선 여러 사이클을 연결해야 함. 
시뮬레이션 모드가 끝난 후 다시 새로운 싸이클의 미리보기가 시작되어야 하며 이는 준비된 싸이클이 끝날 때까지 반복됨.
하나의 운명에 몇 개의 싸이클이 있을지는 기획자가 직접 작업해야 좋으므로 에디터 프로그래밍이 필요함. 이를 위해서는 싸이클을 하나의 집합으로 묶고 UI에서 이를 자유롭게 추가, 삭제, 수정할 수 있는 기능이 필요함.

why: 같은 시뮬레이션을 계속 보면 지루해지는데 처음이 아닌 중간부터 다시 시작할 수 있도록 함으로서 이를 방지하기 위함.



TODO리스트, 대화 로그
when: 운명 변화 중
where: UI
who: 플레이어
what: 정보
how: UI를 통해 주인공의 목표가 적혀있는 TODO리스트나 대화 로그를 볼 수 있음.
TODO리스트는 스테이지마다 내용이 달라져야 함. 이는 엑셀이나 메모장에 있는 것을 가져오는 형식이 좋아보임.
대화 로그는 특정 범위 내에서 이전까지의 대화를 볼 수 있게 하는 것.
why: 주인공의 목표나 대화 기록을 통해 어떤 방식으로 행동을 유도해야하는지 힌트를 주기 위함.


운명 장소 변경
when: 운명 변화 중
where: 운명 변화 가능 장소
who: 플레이어
what: 위치
how: 이동할 수 있는 맵이 왼쪽 하단에 사각형 이미지의 나열로 보이며 이를 클릭 시 카메라가 그 장소로 이동함. 
why: 여러 장소에서 얻은 정보를 종합해 스테이지를 클리어할 수 있도록 하여 더 복잡한 수준의 예측을 촉진하게 하기 위함